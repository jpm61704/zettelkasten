created: 20201120001520600
creator: Jack
modified: 20210121232140370
modifier: Jack
title: LengthAndReplicate
tmap.id: 35170b55-cf30-4bbe-b6ad-13eebae54b2e
type: text/vnd.tiddlywiki

The relation `Length` between lists and natural numbers is an interesting case of relating two types constructors in a one-to-one manner. This sort of relation gives rise to a very interesting set of functions that are essentially induced by the definition. These functions are very common in synthesis literature as targets and this relation gives a nice explanation as to why synthesis is often tractable on this problem.

{{Length.agda}}

This definition essentially says:

* The empty list `[]` corresponds in some interesting way to `zero`
* `cons` corresponds in some interesting way to `suc`

What exactly "interesting" means can be elucidated by the functions which use/consume the `Length` type. That is, the [[destructors of `Length`|DeconstructingLength]] tell us why the relation is of interest. The constructors of Length are of a bit more interest though. This meaning the functions that give a `Length` term as part of the result. The two obvious ones are `length` and `replicate`.

{{LengthReplicate.agda}}

Now, these both have obvious versions as just functions on `List` and `Nat`. That is, they don't return a proof of Length. These are:

{{ListFunctions.agda}}

How do we instrument functions like these to compute a `Length` term alongside them? Can we do this generally for some class of properties? Because of the fact that `Length` 